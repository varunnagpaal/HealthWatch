/** 
 * \file common_ad.h
 * \brief Macros, typedefs, enums common to AD module
 *
 * \author Varun Nagpal
 *
 * \date Oct, 14 2019
 *
 * \version 0.9
 *
 */
#ifndef HWATCH_AD_COMMON_H
#define HWATCH_AD_COMMON_H

/* Set this to 1 to debug */
#define HWATCH_AD_DEBUG 0

/* Set  this to 1 to run prototype code */
#define HWATCH_AD_PROTO

/*
  EINTX_IRQn
  > On prototyping board, we use button on port P0.10 (R2)(pull up)(ext int 8)(digital header 2)(J5-7)
  > On the final board, we use button on port P0.1/CAPT_B (J15)(active low)(ext int 2)(IRQ source 3)

  EIXCFG
  > Bits [2:0] in External Interrupt Configuration 0 Register (EI2CFG)
    corresponding to the external interrupt 8 mode registers (IRQ8MDE)
  > Bits [10:8] in External Interrupt Configuration 0 Register (E10CFG)
    corresponding to the external interrupt 2 mode register (IRQ2MDE)
*/
#ifdef HWATCH_AD_PROTO
#define HWATCH_AD_BTN_EINT_IRQn EINT8_IRQn
#define HWATCH_AD_BTN_IRQ_TRIG_EDGE ADI_GPIO_IRQ_FALLING_EDGE
#define HWATCH_AD_BTN_EICFG EI2CFG
#define HWATCH_AD_BTN_EICFG_SHIFT_CNT 0
#define HWATCH_AD_BTN_PORT ADI_GPIO_PORT_0
#define HWATCH_AD_BTN_PIN ADI_GPIO_PIN_10

#define HWATCH_AD_TIMER_1_DEVID ADI_GPT_DEVID_0
#define HWATCH_AD_TIMER_1_SLEEP_MODE ADI_SYS_MODE_CORE_SLEEP
#define HWATCH_AD_TIMER_1_IRQn TIMER0_IRQn
#define HWATCH_AD_TIMER_CLK_32KHZ ADI_GPT_CLOCK_SELECT_32KHZ_INTERNAL_CLOCK // 32 KHz internal LF oscillator(lfosc)
#define HWATCH_AD_TIMER_CLK_16MHZ ADI_GPT_CLOCK_SELECT_HFOSC                // 16 MHZ internal HF oscillator(hfosc)
#define HWATCH_AD_SLEEP_MODE ADI_SYS_MODE_SYS_SLEEP

/* Port and pin for LED A (P0.11)/active-low/Pull-up and B(P4.2)/active-low/Pull-up */
#define HWATCH_AD_LED_A_PORT ADI_GPIO_PORT_0
#define HWATCH_AD_LED_A_PIN ADI_GPIO_PIN_11
#define HWATCH_AD_LED_B_PORT ADI_GPIO_PORT_4
#define HWATCH_AD_LED_B_PIN ADI_GPIO_PIN_2

#define LED_A_TURN_ON adi_GPIO_SetLow(HWATCH_AD_LED_A_PORT, HWATCH_AD_LED_A_PIN)
#define LED_B_TURN_ON adi_GPIO_SetLow(HWATCH_AD_LED_B_PORT, HWATCH_AD_LED_B_PIN)
#define LED_A_TURN_OFF adi_GPIO_SetHigh(HWATCH_AD_LED_A_PORT, HWATCH_AD_LED_A_PIN)
#define LED_B_TURN_OFF adi_GPIO_SetHigh(HWATCH_AD_LED_B_PORT, HWATCH_AD_LED_B_PIN)

#else

#define HWATCH_AD_BTN_EINT_IRQn EINT2_IRQn
#define HWATCH_AD_BTN_IRQ_TRIG_EDGE ADI_GPIO_IRQ_FALLING_EDGE
#define HWATCH_AD_BTN_EICFG EI0CFG
#define HWATCH_AD_BTN_EICFG_SHIFT_CNT 8
#define HWATCH_AD_BTN_PORT ADI_GPIO_PORT_0
#define HWATCH_AD_BTN_PIN ADI_GPIO_PIN_1
#define HWATCH_AD_TIMER_1_DEVID ADI_GPT_DEVID_0
#define HWATCH_AD_TIMER_1_SLEEP_MODE ADI_SYS_MODE_CORE_SLEEP
#define HWATCH_AD_TIMER_1_IRQn TIMER0_IRQn
#define HWATCH_AD_TIMER_CLK_32KHZ ADI_GPT_CLOCK_SELECT_EXTERNAL_CLOCK // 32 KHz external crystal(lfxtal)
#define HWATCH_AD_TIMER_CLK_16MHZ ADI_GPT_CLOCK_SELECT_PCLK           // 16 MHz PCLK (internal system clock)
#define HWATCH_AD_SLEEP_MODE ADI_SYS_MODE_SYS_SLEEP

/* Port and pin for LEDs A/d5(P2.10)/active-high/Pull-down and B/d6(P2.15)/active-high/Pull-up */
#define HWATCH_AD_LED_A_PORT ADI_GPIO_PORT_2
#define HWATCH_AD_LED_A_PIN ADI_GPIO_PIN_10
#define HWATCH_AD_LED_B_PORT ADI_GPIO_PORT_2
#define HWATCH_AD_LED_B_PIN ADI_GPIO_PIN_15

#define LED_A_TURN_ON adi_GPIO_SetHigh(HWATCH_AD_LED_A_PORT, HWATCH_AD_LED_A_PIN)
#define LED_B_TURN_ON adi_GPIO_SetHigh(HWATCH_AD_LED_B_PORT, HWATCH_AD_LED_B_PIN)
#define LED_A_TURN_OFF adi_GPIO_SetLow(HWATCH_AD_LED_A_PORT, HWATCH_AD_LED_A_PIN)
#define LED_B_TURN_OFF adi_GPIO_SetLow(HWATCH_AD_LED_B_PORT, HWATCH_AD_LED_B_PIN)
#endif

/* Port and pin for SPI0 MOSI(P3.2)  */
#define HWATCH_AD_BLE_WAKEUP_PORT ADI_GPIO_PORT_3
#define HWATCH_AD_BLE_WAKEUP_PIN ADI_GPIO_PIN_2

/* Port and pin for SPI0 MISO(P3.1)  */
#define HWATCH_AD_BLE_ACK_PORT ADI_GPIO_PORT_3
#define HWATCH_AD_BLE_ACK_PIN ADI_GPIO_PIN_1

/* Clock divisors for PCLK/SPI0 (PCLKDIVCNT can be 32 to 1) */
//#define HWATCH_SPI0_FREQ_500K_DIV 32
//#define HWATCH_SPI0_FREQ_1M_DIV   16
//#define HWATCH_SPI0_FREQ_2M_DIV   8
//#define HWATCH_SPI0_FREQ_4M_DIV   4
//#define HWATCH_SPI0_FREQ_8M_DIV   2
//#define HWATCH_SPI0_FREQ_16M_DIV  1

/* Set divisor for clocks. Makre sure: Core_Clk_Div <= SPI0_Clk_Div
   Core_Clk_Div : 1 (recommended), 2, 4, 8(BLE-ADI timing synch may break on or after this)
*/
#define HWATCH_AD_CORE_CLK_DIV       1
//#define HWATCH_AD_SPI0_CLK_DIV       HWATCH_SPI_BIT_RATE

/* SPI device bit rates */
//#define HWATCH_SPI_FREQ_500K      HWATCH_SPI0_FREQ_500K_DIV
//#define HWATCH_SPI_FREQ_1M        HWATCH_SPI0_FREQ_1M_DIV
#define HWATCH_SPI_FREQ_8K        8000
#define HWATCH_SPI_FREQ_10K       10000
#define HWATCH_SPI_FREQ_16K       16000
#define HWATCH_SPI_FREQ_20K       20000
#define HWATCH_SPI_FREQ_32K       32000
#define HWATCH_SPI_FREQ_40K       40000
#define HWATCH_SPI_FREQ_50K       50000
#define HWATCH_SPI_FREQ_64K       64000
#define HWATCH_SPI_FREQ_100K      100000
#define HWATCH_SPI_FREQ_125K      125000
#define HWATCH_SPI_FREQ_128K      128000
#define HWATCH_SPI_FREQ_200K      200000
#define HWATCH_SPI_FREQ_250K      250000
#define HWATCH_SPI_FREQ_256K      256000
#define HWATCH_SPI_FREQ_400K      400000

/* SPI Modes: Mode 0(CPOL=0, CPHASE=0),
              Mode 1(CPOL=0, CPHASE=1),
              Mode 2(CPOL=1, CPHASE=0),
              Mode 3(CPOL=1, CPHASE=1)
*/
#define HWATCH_SPI_CPOL_0       false  /* SCLK ideal low, active high */
#define HWATCH_SPI_CPOL_1       true   /* SCLK ideal high, active low */
#define HWATCH_SPI_CPHASE_0     false  /* SCLK sample or capture edge is leading edge */
#define HWATCH_SPI_CPHASE_1     true   /* SCLK sample or capture edge is trailing edge */

/* SPI Bit order */
#define HWATCH_SPI_LSB_FIRST          true                /* LSB first tx-rx on SPI */
#define HWATCH_SPI_MSB_FIRST          false               /* MSB first tx-rx on SPI */
#define HWATCH_SPI_MASTER_LSB_FIRST   HWATCH_SPI_LSB_FIRST  /* LSB first tx-rx on SPI */
#define HWATCH_SPI_MASTER_MSB_FIRST   HWATCH_SPI_MSB_FIRST  /* MSB first tx-rx on SPI */
#define HWATCH_SPI_SLAVE_LSB_FIRST    HWATCH_SPI_LSB_FIRST  /* LSB first tx-rx on SPI */
#define HWATCH_SPI_SLAVE_MSB_FIRST    HWATCH_SPI_MSB_FIRST  /* MSB first tx-rx on SPI */

/* Group interrupt number for BLE ACK port pin (SPI0 MISO) */
#define HWATCH_AD_BLE_ACK_IRQn GPIOA_IRQn

/* List of all possible error codes */
typedef enum
{
  HWATCH_AD_RESULT_SUCCESS = 0,
  HWATCH_AD_RESULT_ERROR_CLK_DIV,
  HWATCH_AD_RESULT_ERROR_CLK_SRC_EN,
  HWATCH_AD_RESULT_ERROR_GENERIC,
  HWATCH_AD_RESULT_ERROR_UNKNOWN,
  HWATCH_AD_RESULT_ERROR_SYS_INIT,
  HWATCH_AD_RESULT_ERROR_WDT_INIT,
  HWATCH_AD_RESULT_ERROR_WDT_DISABLE,
  HWATCH_AD_RESULT_ERROR_WDT_UNINIT,
  HWATCH_AD_RESULT_ERROR_TIMER_INIT,
  HWATCH_AD_RESULT_ERROR_TIMER_UNINIT,
  HWATCH_AD_RESULT_ERROR_TIMER_MODE,
  HWATCH_AD_RESULT_ERROR_TIMER_CLK_SEL,
  HWATCH_AD_RESULT_ERROR_TIMER_PRESCALER,
  HWATCH_AD_RESULT_ERROR_TIMER_CNT_MODE,
  HWATCH_AD_RESULT_ERROR_TIMER_LD_VAL,
  HWATCH_AD_RESULT_ERROR_TIMER_ENABLE,
  HWATCH_AD_RESULT_ERROR_TIMER_START,
  HWATCH_AD_RESULT_ERROR_TIMER_STOP,
  HWATCH_AD_RESULT_ERROR_TIMER_RESET,
  HWATCH_AD_RESULT_ERROR_GPIO_INIT,
  HWATCH_AD_RESULT_ERROR_GPIO_UNINIT,
  HWATCH_AD_RESULT_ERROR_GPIO_GENERIC,
  HWATCH_AD_RESULT_ERROR_SPI_INIT,
  HWATCH_AD_RESULT_ERROR_SPI_UNINIT,
  HWATCH_AD_RESULT_ERROR_SPI_SET_BIT_RATE,
  HWATCH_AD_RESULT_ERROR_SPI_SET_BLK_MODE,
  HWATCH_AD_RESULT_ERROR_SPI_SET_DMA_MODE,
  HWATCH_AD_RESULT_ERROR_SPI_SET_CONT_MODE,
  HWATCH_AD_RESULT_ERROR_SPI_SET_CPOL,
  HWATCH_AD_RESULT_ERROR_SPI_SET_CPHASE,
  HWATCH_AD_RESULT_ERROR_SPI_SET_BIT_ORDER,
  HWATCH_AD_RESULT_ERROR_SLEEP_ENTER,
  HWATCH_AD_RESULT_ERROR_SLEEP_EXIT,
  HWATCH_AD_RESULT_ERROR_IRQ_ENABLE,
  HWATCH_AD_RESULT_ERROR_IRQ_DISABLE,
  HWATCH_AD_RESULT_ERROR_IRQ_TRIG_EDGE,
  HWATCH_AD_RESULT_ERROR_IRQ_PIN_MASK_SET,
  HWATCH_AD_RESULT_ERROR_ISR_REG,
  HWATCH_AD_RESULT_ERROR_ISR_UNREG
} HWATCH_AD_RESULT_TYPE;

/* State of the AD system */
typedef enum
{
  HWATCH_AD_STATE_HW_INIT,
  HWATCH_AD_STATE_SLEEP,
  HWATCH_AD_STATE_WAIT_FOR_BLE_TO_WAKEUP,
  HWATCH_AD_STATE_WAIT_FOR_BLE_TO_PAIR,
  HWATCH_AD_STATE_WAIT_FOR_USER_DETAILS,
  HWATCH_AD_STATE_WAIT_FOR_USER_TO_WEAR,
  HWATCH_AD_STATE_WAIT,
  HWATCH_AD_STATE_STORE_SENSOR_DATA,
  HWATCH_AD_STATE_STREAM_SENSOR_DATA,

  HWATCH_AD_STATE_HW_CONFIG,
  HWATCH_AD_STATE_ISRS_INIT,
  HWATCH_AD_STATE_IRQ_ENABLE,
  HWATCH_AD_STATE_SLEEP_CORE,
  HWATCH_AD_STATE_SLEEP_SYS,
  HWATCH_AD_STATE_SLEEP_HIB,
  HWATCH_AD_STATE_AWAKEN,
  HWATCH_AD_STATE_SHUT_DOWN,
  HWATCH_AD_STATE_BLE_SPI_COM,
  HWATCH_AD_STATE_RX_RH_SENSOR_DATA,
  HWATCH_AD_STATE_RX_TEMP_SENSOR_DATA,
  HWATCH_AD_STATE_RX_PXMTY_SENSOR_DATA
} HWATCH_AD_STATE_TYPE;

#endif /* HWATCH_AD_COMMON_H */
